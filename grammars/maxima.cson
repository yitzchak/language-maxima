scopeName: 'source.maxima'
name: 'Maxima'
fileTypes: ['mac']
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#commands'
  }
  {
    include: '#numbers'
  }
  {
    include: '#strings'
  }
  {
    include: '#operators'
  }
  {
    include: '#constants'
  }
  {
    match: '\\b(if|then|else|elseif|for|step|thru|do|from|while|unless|in)\\b'
    name: 'keyword.control.maxima'
  }
  {
    match: '\\b(\\w+)\\s*(\\()'
    captures:
      1:
        name: 'function.maxima'
      2:
        name: 'punctuation.definition.begin.bracket.round.maxima'
  }
  {
    match: '\\b[a-zA-Z]\\w+\\b'
    name: 'variable.maxima'
  }
  {
    match: '[;$]'
    name: 'punctuation.terminator.statement.maxima'
  }
  {
    match: ','
    name: 'punctuation.separator.delimiter.maxima'
  }
  {
    match: '\\['
    name: 'punctuation.definition.begin.bracket.square.maxima'
  }
  {
    end: '\\]'
    name: 'punctuation.definition.end.bracket.square.maxima'
  }
  {
    match: '\\('
    name: 'punctuation.definition.begin.bracket.round.maxima'
  }
  {
    end: ')'
    name: 'punctuation.definition.end.bracket.round.maxima'
  }
  {
    match: '{'
    name: 'punctuation.definition.begin.bracket.curly.maxima'
  }
  {
    end: '}'
    name: 'punctuation.definition.end.bracket.curly.maxima'
  }
  {
    match: '(\\b__?\\b|%%?)'
    name: 'variable.system.maxima'
  }
]
repository:
  commands:
    patterns: [
      {
        begin: '^\\s*:lisp(?:-quiet)?\\b'
        beginCaptures:
          0:
            name: 'keyword.command.maxima'
        end: '$'
        contentName: 'source.embedded.lisp'
        patterns: [
          {
            include: 'source.lisp'
          }
        ]
      }
      {
        begin: '^\\s*:(?:break|bt|continue|delete|disable|enable|help|info|next|quit|resume|step|top)\\b'
        beginCaptures:
          0:
            name: 'keyword.command.maxima'
        end: '$'
        contentName: 'keyword.command.value.maxima'
      }
    ]
  comments:
    patterns: [
      {
        begin: '/\\*'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.begin.maxima'
        end: '\\*/'
        endCaptures:
          0:
            name: 'punctuation.definition.comment.end.maxima'
        name: 'comment.block.maxima'
      }
    ]
  constants:
    patterns: [
      {
        match: '%(e|i|gamma|phi|pi)\\b'
        name: 'constant.numerical.maxima'
      }
      {
        match: '%(%e|%k|a_0|alpha|b|b_prime|c|c_1|c_1L|c_2|e_0|E_h|F|G|G_0|h|h_bar|K_J|l_P|m_e|m_P|m_u|mu_0|mu_B|mu_N|n_0|N_A|Phi_0|R|R_inf|R_K|ratio_h_me|ratio_S0_R|sigma|t_P|T_P|V_m|Z_0)\\b'
        name: 'constant.physical.maxima'
      }
      {
        match: '\\b(ind|inf|infinity|minf|und|zeroa|zerob)\\b'
        name: 'constant.numerical.maxima'
      }
      {
        match: '\\b(true|false)\\b'
        name: 'constant.language.maxima'
      }
    ]
  line_continuation_character:
    patterns: [
      {
        match: '(\\\\)\\n'
        captures:
          1:
            name: 'constant.character.escape.line-continuation.maxima'
      }
    ]
  numbers:
    patterns: [
      {
        match: '\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F\']*[0-9a-fA-F])?)|(0(b|B)[01]([01\']*[01])?)|(([0-9]([0-9\']*[0-9])?\\.?[0-9]*([0-9\']*[0-9])?)|(\\.[0-9]([0-9\']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9\']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        name: 'constant.numeric.maxima'
      }
    ]
  operators:
    patterns: [
      {
        match: '::?=?'
        name: 'keyword.operator.assignment.maxima'
      }
      {
        match: '#|<=?|>=?|=|\\bequal\\b|\\bnotequal\\b'
        name: 'keyword.operator.comparison.maxima'
      }
      {
        match: '\\b(and|or|not)\\b'
        name: 'keyword.operator.logical.maxima'
      }
      {
        match: '[-.+*^\'?]'
        name: 'keyword.operator.maxima'
      }
    ]
  strings:
    patterns: [
      {
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.maxima'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.maxima'
        name: 'string.quoted.double.maxima'
        patterns: [
          {
            include: '#string_escaped_char'
          }
          {
            include: '#string_placeholder'
          }
          {
            include: '#line_continuation_character'
          }
        ]
      }
    ]
  string_escaped_char:
    patterns: [
      {
        match: '\\\\[\\\\"\\n]'
        name: 'constant.character.escape.maxima'
      }
      {
        match: '\\\\.'
        name: 'invalid.illegal.unknown-escape.maxima'
      }
    ]
  string_placeholder:
    patterns: [
      {
        match: '~.*?[%&t$dboxrpfeghas~<()\\[\\]{}]'
        name: 'constant.other.placeholder.maxima'
      }
    ]
